name: Terraform Deploy

on:
  push:
    branches:
      - main

jobs:
  bootstrap:
    name: Terraform Bootstrap
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1
    
    - name: Build and Push Docker image
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker-compose build fastapi-app --tag dekardar/terraform-aws:${GITHUB_SHA}
        docker-compose push fastapi-app
        echo "::set-output name=tag::$(date +%s)"
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Check if S3 bucket exists
      id: check-bucket
      run: |
        if aws s3 ls "s3://zee-terraform-state-bucket" > /dev/null 2>&1; then
            echo "::set-output name=exists::true"
        else
            echo "::set-output name=exists::false"
        fi

    - name: Terraform Init (Bootstrap)
      if: steps.check-bucket.outputs.exists == 'false'
      run: |
        cd bootstrap
        terraform init

    - name: Terraform Apply (Bootstrap)
      if: steps.check-bucket.outputs.exists == 'false'
      run: |
        cd bootstrap
        terraform apply -auto-approve 

  deploy:
    name: Terraform Deploy Main Config
    runs-on: ubuntu-latest
    needs: bootstrap

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Create Private Key
      run: |
        echo "${{ secrets.DEPLOYER_PRIVATE_KEY }}" > ./deployer_key
        chmod 600 ./deployer_key
        ssh-keygen -y -f ./deployer_key > ./deployer_key.pub
    
    - name: List files
      run: ls -al
    
    - name: Create Private Key
      run: |
        echo "${{ secrets.DEPLOYER_PRIVATE_KEY }}" > /tmp/deployer_key
        chmod 600 /tmp/deployer_key
        ssh-keygen -y -f /tmp/deployer_key > /tmp/deployer_key.pub
    
    - name: Create public_key.pub from GitHub Secret
      run: |
        echo "${{ secrets.PUBLIC_SSH_KEY }}" > /tmp/chroma-aws.pub
    
    - name: Create private_key from GitHub Secret
      run: |
        echo "${{ secrets.PRIVATE_SSH_KEY }}" > /tmp/chroma-aws

    - name: Terraform Init (Main)
      run: |
        cd terraform
        terraform init
      env:
        AWS_DEFAULT_REGION: us-west-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan (Main)
      run: |
        cd terraform
        terraform plan -var="docker_image_tag=${GITHUB_SHA}"
      env:
        AWS_DEFAULT_REGION: us-west-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Apply (Main)
      run: |
        cd terraform
        terraform apply -auto-approve -var="docker_image_tag=${GITHUB_SHA}"
      env:
        AWS_DEFAULT_REGION: us-west-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1
    
    - name: Install jq
      run: sudo apt-get install -y jq
      
    - name: Update Secrets Manager
      env:
        open_ai_key: ${{ secrets.OPENAI_API_KEY }}
      run: |
        existing_secret=$(aws secretsmanager get-secret-value --secret-id example_secret --query SecretString --output text)
        updated_secret=$(echo $existing_secret | jq --arg open_ai_key "$open_ai_key" '. + {"OPENAI_API_KEY": $open_ai_key}')      
        aws secretsmanager put-secret-value --secret-id example_secret --secret-string "$updated_secret"
    